# Scalable Multi-Container Architecture for High-Traffic Conference Registration
# Supports up to 100,000 visitors with auto-scaling and load balancing
version: '3.8'

networks:
  conference_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  redis_data:
    driver: local
  nginx_cache:
    driver: local

services:
  # Redis for session management and caching
  redis:
    image: redis:7-alpine
    container_name: conference_redis
    restart: unless-stopped
    command: redis-server --maxmemory 256mb --maxmemory-policy allkeys-lru --save 60 1000
    volumes:
      - redis_data:/data
    networks:
      - conference_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  # Load Balancer with NGINX
  nginx:
    image: nginx:alpine
    container_name: conference_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - nginx_cache:/var/cache/nginx
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - app-1
      - app-2
      - app-3
    networks:
      - conference_network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.25'

  # Frontend Application Instances (3 replicas for load distribution)
  app-1: &app-template
    build:
      context: .
      dockerfile: Dockerfile.optimized
    container_name: conference_app_1
    restart: unless-stopped
    environment: &app-env
      - NODE_ENV=production
      - NEXT_TELEMETRY_DISABLED=1
      - PORT=3000
      - HOSTNAME=0.0.0.0
      - INSTANCE_ID=app-1
      - REDIS_URL=redis://redis:6379
      # Sanity Configuration
      - NEXT_PUBLIC_SANITY_PROJECT_ID=n3no08m3
      - NEXT_PUBLIC_SANITY_DATASET=production
      - NEXT_PUBLIC_SANITY_API_VERSION=2023-05-03
      - SANITY_API_TOKEN=skIrRjdaaygkwN7mE9JXLLV8IUPfHl2phKAu0umRR5eCLYuRw4oFi4kXfh3kXa0xxHHJZcv451AY6SFMxGuLWbHUMrPjxppFxA0NAFwgrkEZggVUYPJ3jtKA76br4f07USUJMDOR1JQoS7U0vSsiJzCp8q2CwgAcHiksA7H4FrN04Vh3kC3c
      # PayPal Configuration
      - NEXT_PUBLIC_PAYPAL_CLIENT_ID=AUmI5g_PA8vHr0HSeZq7PukrblnMLeOLQbW60lNHoJGLAqTg3JZjAeracZmAh1WSuuqmZnUIJxLdzGXc
      - NEXT_PUBLIC_PAYPAL_ENVIRONMENT=production
      - NEXT_PUBLIC_PAYPAL_CURRENCY=USD
      - PAYPAL_CLIENT_ID=AUmI5g_PA8vHr0HSeZq7PukrblnMLeOLQbW60lNHoJGLAqTg3JZjAeracZmAh1WSuuqmZnUIJxLdzGXc
      - PAYPAL_CLIENT_SECRET=EMzGihvUsifDMxblEl3j9CGXLbOACaFsC8ykdBwMv3gK8f_a5S7NulJ9sSqe4atrt2d_2bCo7TBZ6x01
      - PAYPAL_ENVIRONMENT=production
      - NEXT_PUBLIC_BASE_URL=https://nursingeducationconferences.org
      # Performance Optimization
      - NODE_OPTIONS=--max-old-space-size=1024
      - UV_THREADPOOL_SIZE=16
    depends_on:
      - redis
    networks:
      - conference_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 15s
      timeout: 5s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 1.5G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'

  app-2:
    <<: *app-template
    container_name: conference_app_2
    environment:
      <<: *app-env
      - INSTANCE_ID=app-2

  app-3:
    <<: *app-template
    container_name: conference_app_3
    environment:
      <<: *app-env
      - INSTANCE_ID=app-3

  # Sanity Backend (CMS) - Separate container for better resource management
  sanity-backend:
    build:
      context: ./SanityBackend
      dockerfile: Dockerfile.sanity
    container_name: conference_sanity
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - SANITY_STUDIO_PROJECT_ID=n3no08m3
      - SANITY_STUDIO_DATASET=production
      - SANITY_STUDIO_API_VERSION=2023-05-03
      - PORT=3333
    networks:
      - conference_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3333/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'

  # Monitoring and Metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: conference_prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=7d'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - conference_network
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  # Auto-scaling controller (custom implementation)
  autoscaler:
    build:
      context: ./autoscaler
      dockerfile: Dockerfile
    container_name: conference_autoscaler
    restart: unless-stopped
    environment:
      - DOCKER_HOST=unix:///var/run/docker.sock
      - PROMETHEUS_URL=http://prometheus:9090
      - SCALE_UP_THRESHOLD=80
      - SCALE_DOWN_THRESHOLD=30
      - MIN_REPLICAS=3
      - MAX_REPLICAS=10
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    depends_on:
      - prometheus
    networks:
      - conference_network
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'

volumes:
  prometheus_data:
    driver: local
